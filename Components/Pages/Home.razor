@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <div class="ai-header text-center mb-4 shadow-sm">
        AI ChatBot
    </div>

    <!-- File Upload Section -->
    <div class="card shadow-sm mb-4 border-0">
        <div class="card-body">
            <h5 class="card-title">Upload CSV Files</h5>
            <p class="card-text text-secondary">Select one or more CSV files to create database tables.</p>
            <InputFile OnChange="LoadFiles" multiple class="form-control mb-3" accept=".csv,.pdf" />
            <button class="btn btn-primary" @onclick="CreateDatabaseTablesAsync">Submit</button>
        </div>
    </div>

    @if (ShowSuccessMessage)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- PDF Section -->
    @if (PdfTexts.Any())
    {
        <div class="card shadow-sm mb-4 border-0">
            <div class="card-body">
                <h5 class="card-title">PDF Documents</h5>
                @foreach (var pdf in PdfTexts)
                {
                    <div class="mb-3">
                        <strong>@pdf.Key</strong>
                        <textarea class="form-control mb-2" rows="3" readonly>@pdf.Value</textarea>
                        <input class="form-control mb-2" @bind="PdfQuestion" placeholder="Ask a question about this PDF..." />
                        <button class="btn btn-info btn-sm" @onclick="() => AskPdfQuestion(pdf.Key)">Ask PDF</button>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Chat Section -->
    <div class="card shadow-sm mb-4 border-0">
        <div class="card-body">
            <h5 class="card-title">Ask a Question</h5>
            <p class="card-text text-secondary">Type your question below and get an answer based on your database.</p>
            <textarea id="textBox" class="form-control mb-3" @bind="InputText" placeholder="Type your question..." rows="2"></textarea>
            <button class="btn btn-success" @onclick="SubmitQuestion">Ask</button>
        </div>
    </div>

    <!-- SQL Query and Table Data Section -->
    @if (ShowQueryResult)
    {
        <div class="card shadow-sm border-0">
            <div class="card-body">
                <h5 class="card-title">SQL Query</h5>
                <pre class="bg-light p-3 rounded">@SqlQuery</pre>

                <h5 class="card-title mt-4">Table Data</h5>
                @if (TableData != null && TableData.Any())
                {
                    <table class="table table-bordered table-striped">
                        <thead class="table-dark">
                            <tr>
                                @foreach (var header in TableHeaders)
                                {
                                    <th>@header</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in TableData)
                            {
                                <tr>
                                    @foreach (var cell in row)
                                    {
                                        <td>@cell</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-muted">No data available.</p>
                }
            </div>
        </div>
    }

</div>





@code {

    private string InputText = null;
    private IBrowserFile? UploadedFile;
    private List<IBrowserFile> UploadedFiles = new();
    private string? SelectedFileName;
    private string? SuccessMessage;
    private bool ShowSuccessMessage { get; set; } = false;

    private bool ShowQueryResult { get; set; } = false;


    private string SqlQuery { get; set; } = string.Empty;
    private List<string> TableHeaders { get; set; } = new();
    private List<List<string>> TableData { get; set; } = new();

    // PDF support
    private Dictionary<string, string> PdfTexts { get; set; } = new();
    private string PdfQuestion { get; set; } = string.Empty;
    private string PdfAnswer { get; set; } = string.Empty;
    private const long MaxFileSize = 200 * 1024 * 1024; // 200 MB




    private void LoadFiles(InputFileChangeEventArgs e)
    {
        UploadedFiles = e.GetMultipleFiles().ToList();
        PdfTexts.Clear();

        foreach (var file in UploadedFiles)
        {
            if (file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            {
                using var stream = file.OpenReadStream();
                using var ms = new MemoryStream();
                stream.CopyTo(ms);
                ms.Position = 0;
                var text = ExtractTextFromPdf(ms);
                PdfTexts[file.Name] = text.Length > 2000 ? text.Substring(0, 2000) + "..." : text;
            }
        }
    }

    private async Task CreateDatabaseTablesAsync()
    {
        try
        {
            foreach (var file in UploadedFiles.Where(f => f.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase)))
            {
                var sanitizedFileName = SanitizeFileName(file.Name);
                using var stream = file.OpenReadStream(MaxFileSize);
                using var reader = new StreamReader(stream);
                var csvContent = await reader.ReadToEndAsync();
                ProcessCsvFile(csvContent, sanitizedFileName);
            }
            SuccessMessage = "Tables created successfully!";
            ShowSuccessMessage = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            SuccessMessage = $"Error: {ex.Message}";
        }
    }

    // PDF extraction using PdfPig
    private string ExtractTextFromPdf(Stream pdfStream)
    {
        try
        {
            using var pdf = UglyToad.PdfPig.PdfDocument.Open(pdfStream);
            var text = string.Join("\n", pdf.GetPages().Select(p => p.Text));
            return text;
        }
        catch
        {
            return "Could not extract text from PDF.";
        }
    }

    private async Task AskPdfQuestion(string pdfFileName)
    {
        var pdfText = PdfTexts[pdfFileName];
        var prompt = $"Given the following document, answer the user's question:\n\n{pdfText}\n\nQuestion: {PdfQuestion}";
        PdfAnswer = await QueryOpenAiPdfAsync(prompt);
        StateHasChanged();
    }

    private async Task<string> QueryOpenAiPdfAsync(string prompt)
    {
        var apiKey = Configuration["OpenAI:ApiKey"];
        if (string.IsNullOrEmpty(apiKey))
            throw new InvalidOperationException("OpenAI API key is not configured.");

        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

        var requestBody = new
        {
            model = "gpt-3.5-turbo",
            messages = new[]
            {
                new { role = "user", content = prompt }
            },
            max_tokens = 300
        };

        try
        {
            var response = await client.PostAsJsonAsync("https://api.openai.com/v1/chat/responses", requestBody);
            response.EnsureSuccessStatusCode();
            var resultJson = await response.Content.ReadAsStringAsync();
            var result = System.Text.Json.JsonDocument.Parse(resultJson);

            var answer = result.RootElement
                .GetProperty("choices")[0]
                .GetProperty("message")
                .GetProperty("content")
                .GetString()
                ?.Trim();

            return answer ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return "Error getting answer from OpenAI.";
        }
    }


    private void ProcessCsvFile(string csvContent, string tableName)
    {
        var lines = csvContent.Split('\n');
        if (lines.Length > 0)
        {
            var headers = lines[0].Split(',');
            var sampleRows = new List<string[]>();

            // Sample up to 50 rows for type inference
            for (int i = 1; i < Math.Min(lines.Length, 1001); i++)
            {
                var row = lines[i].Split(',');
                if (!row.All(string.IsNullOrWhiteSpace))
                    sampleRows.Add(row);
            }

            CreatePostgresTable(headers, tableName, sampleRows);

            // Insert data into PostgreSQL
            for (int i = 1; i < lines.Length; i++)
            {
                var row = lines[i].Split(',');
                if (row.All(string.IsNullOrWhiteSpace))
                    continue;
                InsertRowIntoPostgres(headers, row, tableName);
            }
        }
    }



    private string SanitizeColumnName(string columnName)
    {
        // Remove invalid characters, allow only letters, numbers, and underscores
        var sanitized = new string(columnName
            .Trim()
            .ToLowerInvariant()
            .Select(c => char.IsLetterOrDigit(c) ? c : '_')
            .ToArray());

        // Ensure the name does not start with a digit
        if (sanitized.Length == 0 || char.IsDigit(sanitized[0]))
        {
            sanitized = "col_" + sanitized;
        }

        // Optionally, truncate to 63 characters (PostgreSQL identifier limit)
        if (sanitized.Length > 63)
            sanitized = sanitized.Substring(0, 63);

        return sanitized;
    }

    private string InferPostgresType(List<string> samples)
    {
        bool isInt = true, isDouble = true, isBool = true, isDate = true, isTimestamp = true;

        foreach (var value in samples)
        {
            var v = value.Trim();
            if (string.IsNullOrEmpty(v)) continue;

            if (isInt && !int.TryParse(v, out _)) isInt = false;
            if (isDouble && !double.TryParse(v, out _)) isDouble = false;
            if (isBool && !bool.TryParse(v, out _)) isBool = false;
            if (isDate && !DateTime.TryParseExact(v, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None, out _)) isDate = false;
            if (isTimestamp && !DateTime.TryParse(v, out _)) isTimestamp = false;
        }

        if (isInt) return "DOUBLE PRECISION";
        if (isDouble) return "DOUBLE PRECISION";
        if (isBool) return "BOOLEAN";
        if (isDate) return "DATE";
        if (isTimestamp) return "TIMESTAMP";
        return "TEXT";
    }

    private void CreatePostgresTable(string[] headers, string tableName, List<string[]> sampleRows)
    {
        // Infer types for each column
        var columnTypes = new List<string>();
        for (int i = 0; i < headers.Length; i++)
        {
            var samples = sampleRows.Select(row => row.Length > i ? row[i] : "").ToList();
            columnTypes.Add(InferPostgresType(samples));
        }

        // Sanitize column names and build column definitions
        var columns = string.Join(", ", headers.Select((h, i) => $"{SanitizeColumnName(h)} {columnTypes[i]}"));

        var dropTableQuery = $"DROP TABLE IF EXISTS {tableName};";
        var createTableQuery = $"CREATE TABLE IF NOT EXISTS {tableName} ({columns});";

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using (var dropCommand = new Npgsql.NpgsqlCommand(dropTableQuery, connection))
        {
            dropCommand.ExecuteNonQuery();
        }
        using (var createCommand = new Npgsql.NpgsqlCommand(createTableQuery, connection))
        {
            createCommand.ExecuteNonQuery();
        }
    }



    private void InsertRowIntoPostgres(string[] headers, string[] row, string tableName)
    {
        //var tableName = SelectedFileName ?? "UploadedData";
        var columns = string.Join(", ", headers.Select(h => SanitizeColumnName(h)));
        var values = string.Join(", ", row.Select(r => $"'{r.Trim()}'"));

        var query = $"INSERT INTO {tableName} ({columns}) VALUES ({values});";

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using var command = new Npgsql.NpgsqlCommand(query, connection);
        command.ExecuteNonQuery();
    }

    private string SanitizeFileName(string fileName)
    {
        // Remove special characters and replace spaces with underscores
        var sanitized = new string(fileName.Where(c => char.IsLetterOrDigit(c) || c == '_').ToArray());
        return sanitized.Replace(" ", "_");
    }


    @inject IConfiguration Configuration

    private string GetConnectionString()
    {
        return Configuration.GetConnectionString("PostgresConnection");
    }


    private async Task SubmitQuestion()
    {
        if (!string.IsNullOrWhiteSpace(InputText))
        {
            var tableInfo = GenerateTableInfo();
            var response = await QueryOpenAiAsync(InputText, tableInfo);

            if (!string.IsNullOrWhiteSpace(response))
            {
                QueryPostgres(response);
                ShowQueryResult = true;
                StateHasChanged(); // Force UI update after TableData chang
            }
        }
    }



    private async Task<string> QueryOpenAiAsync(string nlQuery, string tableInfo)
    {
        var apiKey = Configuration["OpenAI:ApiKey"];
        if (string.IsNullOrEmpty(apiKey))
        {
            throw new InvalidOperationException("OpenAI API key is not configured.");
        }

        var prompt = $@"
            You are an AI that converts natural language questions into SQL queries.
            Available tables and their columns:
            {tableInfo}

            Generate an SQL query that answers the following question:
            {nlQuery}
            Ensure to use appropriate JOINs if required.
            SQL Query:
";

        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

        var requestBody = new
        {
            model = "gpt-3.5-turbo",
            messages = new[]
            {
            new { role = "user", content = prompt }
        },
            max_tokens = 150
        };

        try
        {
            var response = await client.PostAsJsonAsync("https://api.openai.com/v1/chat/completions", requestBody);
            response.EnsureSuccessStatusCode();

            var resultJson = await response.Content.ReadAsStringAsync();
            var result = System.Text.Json.JsonDocument.Parse(resultJson);

            var query = result.RootElement
                              .GetProperty("choices")[0]
                              .GetProperty("message")
                              .GetProperty("content")
                              .GetString()
                              ?.Trim();

            return query ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return null;
        }
    }


    /*private string QueryOpenAi(string nlQuery, string tableInfo)
    {
        // Retrieve the OpenAI API key from appsettings.json
        var apiKey = Configuration["OpenAI:ApiKey"];
        if (string.IsNullOrEmpty(apiKey))
        {
            throw new InvalidOperationException("OpenAI API key is not configured.");
        }

        // Construct the prompt
        var prompt = $@"
        You are an AI that converts natural language questions into SQL queries. 
        Available tables and their columns:
        {tableInfo}

        Generate an SQL query that answers the following question:
        {nlQuery}
        Ensure to use appropriate JOINs if required.
        SQL Query:
        ";

        // Prepare the HTTP client
        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

        // Prepare the request body
        var requestBody = new
        {
            model = "gpt-3.5-turbo",
            messages = new[]
            {
                new { role = "system", content = prompt }
            },
            max_tokens = 150
        };

        try
        {
            // Send the request to OpenAI API
            var response = client.PostAsJsonAsync("https://api.openai.com/v1/chat/completions", requestBody).Result;
            var result = response.Content.ReadFromJsonAsync<dynamic>().Result;

            // Extract and return the SQL query
            return result?.choices[0]?.message?.content?.ToString()?.Trim() ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return null;
        }
    }


    private string QueryGptNeo(string nlQuery, string tableInfo)
    {
        // Construct the prompt
            // Construct the prompt
            var prompt = $@"
            You are an AI that converts natural language questions into SQL queries.
            Available tables and their columns:
        {tableInfo}

            Generate an SQL query that answers the following question:
        {nlQuery}
            Ensure to use appropriate JOINs if required.
            SQL Query:
            ";

        try
        {
            // Call the locally hosted GPT-Neo model or API
            var client = new HttpClient();
            var requestBody = new
            {
                prompt = prompt,
                max_tokens = 512
            };

            // Replace the URL with your locally hosted GPT-Neo endpoint
            var response = client.PostAsJsonAsync("http://localhost:5000/generate", requestBody).Result;
            var result = response.Content.ReadFromJsonAsync<dynamic>().Result;

            // Extract and return the SQL query
            return result?.text?.ToString()?.Trim() ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return null;
        }
    }*/


    private void QueryPostgres(string query)
    { 
        SqlQuery = query;

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using var command = new Npgsql.NpgsqlCommand(query, connection);
        using var reader = command.ExecuteReader();

        TableHeaders = Enumerable.Range(0, reader.FieldCount)
                                 .Select(reader.GetName)
                                 .ToList();

        TableData = new List<List<string>>();
        while (reader.Read())
        {
            var row = new List<string>();
            for (int i = 0; i < reader.FieldCount; i++)
            {
                row.Add(reader[i]?.ToString() ?? string.Empty);
            }
            TableData.Add(row);
        }
    }



   
    private string GenerateTableInfo()
    {
        // Generate table information dynamically
        var tableInfo = new List<string>();

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        // Query to get table names
        var tableQuery = "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';";
        using var tableCommand = new Npgsql.NpgsqlCommand(tableQuery, connection);
        using var tableReader = tableCommand.ExecuteReader();

        var tables = new List<string>();
        while (tableReader.Read())
        {
            tables.Add(tableReader.GetString(0));
        }
        tableReader.Close();

        // Query to get columns for each table
        foreach (var table in tables)
        {
            var columnQuery = $"SELECT column_name FROM information_schema.columns WHERE table_name = '{table}';";
            using var columnCommand = new Npgsql.NpgsqlCommand(columnQuery, connection);
            using var columnReader = columnCommand.ExecuteReader();

            var columns = new List<string>();
            while (columnReader.Read())
            {
                columns.Add(columnReader.GetString(0));
            }
            columnReader.Close();

            tableInfo.Add($"{table}: {string.Join(", ", columns)}");
        }

        return string.Join("\n", tableInfo);
    }



}
