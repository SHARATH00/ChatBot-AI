@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>AI ChatBot</h1>

<div>
    <InputFile OnChange="LoadFiles" multiple />
    <button @onclick="CreateDatabaseTablesAsync">Submit</button>
</div>

<div>
    <textarea id="textBox" class="form-control" @bind="InputText"  placeholder="Type your question..." rows="5"></textarea>
    <button @onclick="SubmitQuestion">Ask</button>
</div>



@code {

    private string InputText = null;
    private IBrowserFile? UploadedFile;
    private List<IBrowserFile> UploadedFiles = new();
    private string? SelectedFileName;
    private string? SuccessMessage;


    private void LoadFiles(InputFileChangeEventArgs e)
    {

        // Store all selected files
        UploadedFiles = e.GetMultipleFiles().ToList();


    }

    private async void CreateDatabaseTablesAsync() 
    {

        
            try
            {
                // Log to the console
                Console.WriteLine("CreateDatabaseTables function is executing.");

                foreach (var file in UploadedFiles)
                {
                    // Extract and sanitize the file name to use as the table name
                    var sanitizedFileName = SanitizeFileName(file.Name);


                        // Read the file content
                        using var stream = file.OpenReadStream();
                        using var reader = new StreamReader(stream);
                        var csvContent = await reader.ReadToEndAsync();

                        // Process the CSV content
                    ProcessCsvFile(csvContent, sanitizedFileName);
                }

                // Set success message
                SuccessMessage = "Tables created successfully!";
            }
            catch (Exception ex)
            {
                // Handle errors (optional)
                SuccessMessage = $"Error: {ex.Message}";
            }
        


    }

   


    private void ProcessCsvFile(string csvContent, string tableName)
    {
        // Parse CSV and create table in PostgreSQL
        var lines = csvContent.Split('\n');
        if (lines.Length > 0)
        {
            var headers = lines[0].Split(',');

            // Create table in PostgreSQL
            CreatePostgresTable(headers, tableName);

            // Insert data into PostgreSQL
            for (int i = 1; i < lines.Length; i++)
            {
                var row = lines[i].Split(',');

                // Skip empty rows (e.g., the last row in the file)
                if (row.All(string.IsNullOrWhiteSpace))
                {
                    continue;
                }

                InsertRowIntoPostgres(headers, row, tableName);
            }
        }
    }


    private void CreatePostgresTable(string[] headers, string tableName)
    {
        // Define table creation logic

        var columns = string.Join(", ", headers.Select(h => $"{h.Trim()} TEXT"));

        // Query to drop the table if it already exists
        var dropTableQuery = $"DROP TABLE IF EXISTS {tableName};";

        // Query to create the table
        var createTableQuery = $"CREATE TABLE IF NOT EXISTS {tableName} ({columns});";

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        // Execute the drop table query
        using (var dropCommand = new Npgsql.NpgsqlCommand(dropTableQuery, connection))
        {
            dropCommand.ExecuteNonQuery();
        }

        // Execute the create table query
        using (var createCommand = new Npgsql.NpgsqlCommand(createTableQuery, connection))
        {
            createCommand.ExecuteNonQuery();
        }
    }

    private void InsertRowIntoPostgres(string[] headers, string[] row, string tableName)
    {
        //var tableName = SelectedFileName ?? "UploadedData";
        var columns = string.Join(", ", headers.Select(h => h.Trim()));
        var values = string.Join(", ", row.Select(r => $"'{r.Trim()}'"));

        var query = $"INSERT INTO {tableName} ({columns}) VALUES ({values});";

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using var command = new Npgsql.NpgsqlCommand(query, connection);
        command.ExecuteNonQuery();
    }

    private string SanitizeFileName(string fileName)
    {
        // Remove special characters and replace spaces with underscores
        var sanitized = new string(fileName.Where(c => char.IsLetterOrDigit(c) || c == '_').ToArray());
        return sanitized.Replace(" ", "_");
    }


    @inject IConfiguration Configuration

    private string GetConnectionString()
    {
        return Configuration.GetConnectionString("PostgresConnection");
    }

    private void SubmitQuestion()
    {
        if (!string.IsNullOrWhiteSpace(InputText))
        {
            // Use OpenAI API to process the question
            var response = QueryOpenAi(InputText);

            // Query PostgreSQL based on the response
            QueryPostgres(response);
        }
    }

    private string QueryOpenAi(string question)
    {
        // Call OpenAI API
        var apiKey = "Your_OpenAI_API_Key";
        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

        var requestBody = new
        {
            model = "text-davinci-003",
            prompt = question,
            max_tokens = 100
        };

        var response = client.PostAsJsonAsync("https://api.openai.com/v1/completions", requestBody).Result;
        var result = response.Content.ReadFromJsonAsync<dynamic>().Result;

        return result?.choices[0]?.text?.ToString() ?? string.Empty;
    }

    private void QueryPostgres(string query)
    {
        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using var command = new Npgsql.NpgsqlCommand(query, connection);
        using var reader = command.ExecuteReader();

        while (reader.Read())
        {
            // Process query results
        }
    }




}
