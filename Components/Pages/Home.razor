@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <h1 class="text-center mb-4">AI ChatBot</h1>

    <!-- File Upload Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h5 class="card-title">Upload CSV Files</h5>
            <p class="card-text">Select one or more CSV files to create database tables.</p>
            <InputFile OnChange="LoadFiles" multiple class="form-control mb-3" />
            <button class="btn btn-primary" @onclick="CreateDatabaseTablesAsync">Submit</button>
        </div>
    </div>

    <!-- Success Message -->
    @if (ShowSuccessMessage)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @SuccessMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Chat Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h5 class="card-title">Ask a Question</h5>
            <p class="card-text">Type your question below and get an answer based on your database.</p>
            <textarea id="textBox" class="form-control mb-3" @bind="InputText" placeholder="Type your question..." rows="5"></textarea>
            <button class="btn btn-success" @onclick="SubmitQuestion">Ask</button>
        </div>
    </div>

    <!-- SQL Query and Table Data Section -->
    <div class="card shadow-sm">
        <div class="card-body">
            <h5 class="card-title">SQL Query</h5>
            <pre class="bg-light p-3 rounded">@SqlQuery</pre>

            <h5 class="card-title mt-4">Table Data</h5>
            @if (TableData != null && TableData.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead class="table-dark">
                        <tr>
                            @foreach (var header in TableHeaders)
                            {
                                <th>@header</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in TableData)
                        {
                            <tr>
                                @foreach (var cell in row)
                                {
                                    <td>@cell</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No data available.</p>
            }
        </div>
    </div>
</div>




@code {

    private string InputText = null;
    private IBrowserFile? UploadedFile;
    private List<IBrowserFile> UploadedFiles = new();
    private string? SelectedFileName;
    private string? SuccessMessage;
    private bool ShowSuccessMessage { get; set; } = false;


    private string SqlQuery { get; set; } = string.Empty;
    private List<string> TableHeaders { get; set; } = new();
    private List<List<string>> TableData { get; set; } = new();



    private void LoadFiles(InputFileChangeEventArgs e)
    {

        // Store all selected files
        UploadedFiles = e.GetMultipleFiles().ToList();


    }

    private async void CreateDatabaseTablesAsync() 
    {

        
            try
            {
                // Log to the console
                Console.WriteLine("CreateDatabaseTables function is executing.");

                foreach (var file in UploadedFiles)
                {
                    // Extract and sanitize the file name to use as the table name
                    var sanitizedFileName = SanitizeFileName(file.Name);


                        // Read the file content
                        using var stream = file.OpenReadStream();
                        using var reader = new StreamReader(stream);
                        var csvContent = await reader.ReadToEndAsync();

                        // Process the CSV content
                    ProcessCsvFile(csvContent, sanitizedFileName);
                }

                // Set success message
                SuccessMessage = "Tables created successfully!";
                ShowSuccessMessage = true;
            }
            catch (Exception ex)
            {
                // Handle errors (optional)
                SuccessMessage = $"Error: {ex.Message}";
            }
        


    }

   


    private void ProcessCsvFile(string csvContent, string tableName)
    {
        // Parse CSV and create table in PostgreSQL
        var lines = csvContent.Split('\n');
        if (lines.Length > 0)
        {
            var headers = lines[0].Split(',');

            // Create table in PostgreSQL
            CreatePostgresTable(headers, tableName);

            // Insert data into PostgreSQL
            for (int i = 1; i < lines.Length; i++)
            {
                var row = lines[i].Split(',');

                // Skip empty rows (e.g., the last row in the file)
                if (row.All(string.IsNullOrWhiteSpace))
                {
                    continue;
                }

                InsertRowIntoPostgres(headers, row, tableName);
            }
        }
    }


    private void CreatePostgresTable(string[] headers, string tableName)
    {
        // Define table creation logic

        var columns = string.Join(", ", headers.Select(h => $"{h.Trim()} TEXT"));

        // Query to drop the table if it already exists
        var dropTableQuery = $"DROP TABLE IF EXISTS {tableName};";

        // Query to create the table
        var createTableQuery = $"CREATE TABLE IF NOT EXISTS {tableName} ({columns});";

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        // Execute the drop table query
        using (var dropCommand = new Npgsql.NpgsqlCommand(dropTableQuery, connection))
        {
            dropCommand.ExecuteNonQuery();
        }

        // Execute the create table query
        using (var createCommand = new Npgsql.NpgsqlCommand(createTableQuery, connection))
        {
            createCommand.ExecuteNonQuery();
        }
    }

    private void InsertRowIntoPostgres(string[] headers, string[] row, string tableName)
    {
        //var tableName = SelectedFileName ?? "UploadedData";
        var columns = string.Join(", ", headers.Select(h => h.Trim()));
        var values = string.Join(", ", row.Select(r => $"'{r.Trim()}'"));

        var query = $"INSERT INTO {tableName} ({columns}) VALUES ({values});";

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using var command = new Npgsql.NpgsqlCommand(query, connection);
        command.ExecuteNonQuery();
    }

    private string SanitizeFileName(string fileName)
    {
        // Remove special characters and replace spaces with underscores
        var sanitized = new string(fileName.Where(c => char.IsLetterOrDigit(c) || c == '_').ToArray());
        return sanitized.Replace(" ", "_");
    }


    @inject IConfiguration Configuration

    private string GetConnectionString()
    {
        return Configuration.GetConnectionString("PostgresConnection");
    }


    private async void SubmitQuestion()
    {
        if (!string.IsNullOrWhiteSpace(InputText))
        {
            var tableInfo = GenerateTableInfo();
            var response = await QueryOpenAiAsync(InputText, tableInfo);

            if (!string.IsNullOrWhiteSpace(response))
            {
                QueryPostgres(response);
            }
        }
    }



    private async Task<string> QueryOpenAiAsync(string nlQuery, string tableInfo)
    {
        var apiKey = Configuration["OpenAI:ApiKey"];
        if (string.IsNullOrEmpty(apiKey))
        {
            throw new InvalidOperationException("OpenAI API key is not configured.");
        }

        var prompt = $@"
            You are an AI that converts natural language questions into SQL queries.
            Available tables and their columns:
            {tableInfo}

            Generate an SQL query that answers the following question:
            {nlQuery}
            Ensure to use appropriate JOINs if required.
            SQL Query:
";

        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

        var requestBody = new
        {
            model = "gpt-3.5-turbo",
            messages = new[]
            {
            new { role = "user", content = prompt }
        },
            max_tokens = 150
        };

        try
        {
            var response = await client.PostAsJsonAsync("https://api.openai.com/v1/chat/completions", requestBody);
            response.EnsureSuccessStatusCode();

            var resultJson = await response.Content.ReadAsStringAsync();
            var result = System.Text.Json.JsonDocument.Parse(resultJson);

            var query = result.RootElement
                              .GetProperty("choices")[0]
                              .GetProperty("message")
                              .GetProperty("content")
                              .GetString()
                              ?.Trim();

            return query ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return null;
        }
    }


    /*private string QueryOpenAi(string nlQuery, string tableInfo)
    {
        // Retrieve the OpenAI API key from appsettings.json
        var apiKey = Configuration["OpenAI:ApiKey"];
        if (string.IsNullOrEmpty(apiKey))
        {
            throw new InvalidOperationException("OpenAI API key is not configured.");
        }

        // Construct the prompt
        var prompt = $@"
        You are an AI that converts natural language questions into SQL queries. 
        Available tables and their columns:
        {tableInfo}

        Generate an SQL query that answers the following question:
        {nlQuery}
        Ensure to use appropriate JOINs if required.
        SQL Query:
        ";

        // Prepare the HTTP client
        var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {apiKey}");

        // Prepare the request body
        var requestBody = new
        {
            model = "gpt-3.5-turbo",
            messages = new[]
            {
                new { role = "system", content = prompt }
            },
            max_tokens = 150
        };

        try
        {
            // Send the request to OpenAI API
            var response = client.PostAsJsonAsync("https://api.openai.com/v1/chat/completions", requestBody).Result;
            var result = response.Content.ReadFromJsonAsync<dynamic>().Result;

            // Extract and return the SQL query
            return result?.choices[0]?.message?.content?.ToString()?.Trim() ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return null;
        }
    }


    private string QueryGptNeo(string nlQuery, string tableInfo)
    {
        // Construct the prompt
            // Construct the prompt
            var prompt = $@"
            You are an AI that converts natural language questions into SQL queries.
            Available tables and their columns:
        {tableInfo}

            Generate an SQL query that answers the following question:
        {nlQuery}
            Ensure to use appropriate JOINs if required.
            SQL Query:
            ";

        try
        {
            // Call the locally hosted GPT-Neo model or API
            var client = new HttpClient();
            var requestBody = new
            {
                prompt = prompt,
                max_tokens = 512
            };

            // Replace the URL with your locally hosted GPT-Neo endpoint
            var response = client.PostAsJsonAsync("http://localhost:5000/generate", requestBody).Result;
            var result = response.Content.ReadFromJsonAsync<dynamic>().Result;

            // Extract and return the SQL query
            return result?.text?.ToString()?.Trim() ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            return null;
        }
    }*/


    private void QueryPostgres(string query)
    {
        SqlQuery = query;

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using var command = new Npgsql.NpgsqlCommand(query, connection);
        using var reader = command.ExecuteReader();

        TableHeaders = Enumerable.Range(0, reader.FieldCount)
                                 .Select(reader.GetName)
                                 .ToList();

        TableData = new List<List<string>>();
        while (reader.Read())
        {
            var row = new List<string>();
            for (int i = 0; i < reader.FieldCount; i++)
            {
                row.Add(reader[i]?.ToString() ?? string.Empty);
            }
            TableData.Add(row);
        }
    }



   
    private string GenerateTableInfo()
    {
        // Generate table information dynamically
        var tableInfo = new List<string>();

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        // Query to get table names
        var tableQuery = "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';";
        using var tableCommand = new Npgsql.NpgsqlCommand(tableQuery, connection);
        using var tableReader = tableCommand.ExecuteReader();

        var tables = new List<string>();
        while (tableReader.Read())
        {
            tables.Add(tableReader.GetString(0));
        }
        tableReader.Close();

        // Query to get columns for each table
        foreach (var table in tables)
        {
            var columnQuery = $"SELECT column_name FROM information_schema.columns WHERE table_name = '{table}';";
            using var columnCommand = new Npgsql.NpgsqlCommand(columnQuery, connection);
            using var columnReader = columnCommand.ExecuteReader();

            var columns = new List<string>();
            while (columnReader.Read())
            {
                columns.Add(columnReader.GetString(0));
            }
            columnReader.Close();

            tableInfo.Add($"{table}: {string.Join(", ", columns)}");
        }

        return string.Join("\n", tableInfo);
    }



}
