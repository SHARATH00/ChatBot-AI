@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>AI ChatBot</h1>

<div>
    <InputFile OnChange="LoadFiles" multiple />
    <button @onclick="CreateDatabaseTables">Submit</button>
</div>

<div>
    <textarea id="textBox" class="form-control" @bind="InputText"  placeholder="Type your question..." rows="5"></textarea>
    <button @onclick="SubmitQuestion">Ask</button>
</div>



@code {

    private string InputText = null;
    private IBrowserFile? UploadedFile;
    private string? SelectedFileName;
    private string? SuccessMessage;


    private void LoadFiles(InputFileChangeEventArgs e)
    {

    }

    private void CreateDatabaseTables() 
    {

        
            try
            {
                // Log to the console
                Console.WriteLine("CreateDatabaseTables function is executing.");

                // Read the file content
                using var stream = UploadedFile.OpenReadStream();
                using var reader = new StreamReader(stream);
                var csvContent = reader.ReadToEnd();

                // Process the CSV content
                ProcessCsvFile(csvContent);

                // Set success message
                SuccessMessage = "Tables created successfully!";
            }
            catch (Exception ex)
            {
                // Handle errors (optional)
                SuccessMessage = $"Error: {ex.Message}";
            }
        


    }

   


    private void ProcessCsvFile(string csvContent)
    {
        // Parse CSV and create table in PostgreSQL
        var lines = csvContent.Split('\n');
        if (lines.Length > 0)
        {
            var headers = lines[0].Split(',');

            // Create table in PostgreSQL
            CreatePostgresTable(headers);

            // Insert data into PostgreSQL
            for (int i = 1; i < lines.Length; i++)
            {
                var row = lines[i].Split(',');
                InsertRowIntoPostgres(headers, row);
            }
        }
    }


    private void CreatePostgresTable(string[] headers)
    {
        // Define table creation logic
        var tableName = "UploadedData";
        var columns = string.Join(", ", headers.Select(h => $"{h.Trim()} TEXT"));

        var query = $"CREATE TABLE IF NOT EXISTS {tableName} ({columns});";

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using var command = new Npgsql.NpgsqlCommand(query, connection);
        command.ExecuteNonQuery();
    }

    private void InsertRowIntoPostgres(string[] headers, string[] row)
    {
        var tableName = "UploadedData";
        var columns = string.Join(", ", headers.Select(h => h.Trim()));
        var values = string.Join(", ", row.Select(r => $"'{r.Trim()}'"));

        var query = $"INSERT INTO {tableName} ({columns}) VALUES ({values});";

        using var connection = new Npgsql.NpgsqlConnection(GetConnectionString());
        connection.Open();

        using var command = new Npgsql.NpgsqlCommand(query, connection);
        command.ExecuteNonQuery();
    }



    @inject IConfiguration Configuration

    private string GetConnectionString()
    {
        return Configuration.GetConnectionString("PostgresConnection");
    }

    private void SubmitQuestion()
    {

    }




}
